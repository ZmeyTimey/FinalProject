package by.epam.university.dao;

import by.epam.university.dao.exception.DAOException;
import by.epam.university.model.User;

import java.util.List;

/**
 * Defines methods for working with user.
 */
public interface UserDAO {

    /**
     * Checks if the login exists already in the data base.
     * @param login searching user's login.
     * @return true if login exists in data base, false if it don't exists.
     * @throws DAOException
     *             the exception during getting connection
     *             with data base or during
     *             working with data base.
     */
    boolean isLoginExists(String login) throws DAOException;

    /**
     * Checks is email that user enters for registration already in data base.
     * @param user input {@link User} instance.
     * @return is email exists.
     * @throws DAOException
     *             the exception during getting connection with data base
     *             or during working with data base.
     */
    boolean isEmailAlreadyExists(User user) throws DAOException;

    /**
     * Adds a new user to the data base. Returns the id of this user
     * generated by the data base.
     *
     * @param user {@link User} instance containing user's data
     * @return the id of added user
     * @throws DAOException
     *             the exception during getting connection with data base
     *             or during working with data base.
     */
    int addUser(User user) throws DAOException;

    /**
     * Checks if the password of the user with given login is correct.
     *
     * @param login user's login.
     * @param password user's password.
     * @return true if password is correct, false if it is not.
     * @throws DAOException
     *             the exception during getting connection
     *             with data base or during
     *             working with data base.
     */
    boolean isPasswordCorrect(String login, String password)
            throws DAOException;

    /**
     * Gets the user by login and password. Returns null if the user with
     * such parameters doesn't exist.
     *
     * @param login user's login
     * @param password user's password
     * @return the user object if user with such parameters exists, null if not
     *         exists
     * @throws DAOException
     *             the exception during getting connection
     *             with data base or during
     *             working with data base.
     */
    User getUserByLoginAndPassword(String login, String password)
            throws DAOException;

    /**
     * Gets all the personal user's information from data base.
     * @param id user's id.
     * @return {@link User} instance containing
     * all the personal user's information.
     * @throws DAOException
     *             the exception during getting connection
     *             with data base or during
     *             working with data base.
     */
    User getUserPersonalInfo(int id) throws DAOException;

    /**
     * Sets to existing user additional info. The user should have been added
     * already before using this method.
     *
     * @param user
     *            with filling fields
     * @throws DAOException
     *             the exception during getting connection with data base
     *             or during working with data base.
     */
    void setUserPersonalInfo(User user) throws DAOException;

    /**
     * Sets user data connected with application for admission form
     * and sets application as sent.
     * @param userId user's id
     * @param averageGrade user's average school grade
     * @param speciality speciality that user chose
     * @throws DAOException
     *             the exception during getting connection with data base
     *             or during working with data base.
     */
    void setApplicationData(int userId, int averageGrade, String speciality)
            throws DAOException;

    /**
     * Creates a list of users who already sent an application for verification.
     * @return list of users
     * @throws DAOException
     *             the exception during getting connection with data base
     *             or during working with data base.
     */
    List<User> getUsersWithAppl() throws DAOException;

    /**
     * Gets user's school grade from the data base by user id.
     * @param userId user id
     * @return user's school grade
     * @throws DAOException
     *             the exception during getting connection with data base
     *             or during working with data base.
     */
    int getSchoolCertificate(int userId) throws DAOException;
    void markApplicationAsSent(int userId) throws DAOException;
    List<Integer> getSubmittedUserId(String facultyId) throws DAOException;
}
